plugins {
    id 'fabric-loom' version '1.0-SNAPSHOT'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = "${project.archives_base_name}-mc${project.minecraft_version}"
version = "${project.mod_version}"
group = project.maven_group

repositories {
    maven { url "https://maven.terraformersmc.com/releases/" }
    maven { url = "https://jitpack.io" }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    //Mod Menu
    modCompileOnly modRuntimeOnly ("com.terraformersmc:modmenu:${project.mod_menu_version}"), {
        exclude(group: "net.fabricmc.fabric-api")
    }

    //Fabric ASM
    modRuntimeOnly("com.github.Chocohead:Fabric-ASM:v${project.fabric_asm_version}") {
        exclude (group: "net.fabricmc.fabric-api")
    }

    //Enchantment Target Mixin
    modRuntimeOnly("illyena.gilding:Gilding-core-Api-mc${project.minecraft_version}:${project.core_api_version}")

    //Gilding API
//	modImplementation "com.github.Illyena:Gilding-core-mc${project.minecraft_version}:${project.gilding_version}"
    modImplementation "illyena.gilding:Gilding-core-mc${project.minecraft_version}:${project.gilding_version}"

}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    inputs.property "gilding_version", project.gilding_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
            "minecraft_version": project.minecraft_version,
            "loader_version": project.loader_version,
            "gilding_version": project.gilding_version
    }
}

def dataOutput = "src/main/generated"

loom {
    runs {
        datagen {
            server()

            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file(dataOutput)}"

            runDir "build/datagen"
        }
    }
    accessWidenerPath = file("src/main/resources/holidays.accesswidener")

}

sourceSets { main { resources { srcDirs += dataOutput } } }

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
